import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
public class Calculator implements ActionListener
{
    JFrame frame;
    JTextField textfield;
    JButton[] numberButtons = new JButton[10];
    JButton[] functionButtons = new JButton[8];
    JButton[] coolerButtons = new JButton [4];
    JButton[] trigButtons = new JButton[6];
    
    JButton addButton,subButton,mulButton,divButton;
    JButton decButton,equButton,delButton,clrButton;
    JButton openBrace,closeBrace;
    JButton sinButton,cosButton,tanButton,secButton,cscButton,cotButton;
    
    JPanel panel,panel2,panel3;
    Font myFont = new Font("Arial",Font.PLAIN,20);
    String expression = new String();
    double num1=0,num2=0;
    char operator;
    Calculator(){
        frame = new JFrame("Calculator");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600,550);
        frame.setLayout(null);
        
        expression = "";
        textfield = new JTextField();
        textfield.setBounds(50,25,300,50);
        textfield.setFont(myFont);
        textfield.setEditable(true);
        
        addButton = new JButton("+");
        subButton = new JButton("-");
        mulButton = new JButton("*");
        divButton = new JButton("/");
        decButton = new JButton(".");
        equButton = new JButton("=");
        delButton = new JButton("Del");
        clrButton = new JButton("Clr");
        
        functionButtons[0]= addButton;
        functionButtons[1]= subButton;
        functionButtons[2]= mulButton;
        functionButtons[3]= divButton;
        functionButtons[4]= decButton;
        functionButtons[5]= equButton;
        functionButtons[6]= delButton;
        functionButtons[7]= clrButton;
        
        
        openBrace = new JButton("(");
        closeBrace = new JButton(")");
        
        coolerButtons[0] = openBrace;
        coolerButtons[1] = closeBrace;
        
        for(int i=0;i<8;i++){
            functionButtons[i].addActionListener(this);
            functionButtons[i].setFont(myFont);
            functionButtons[i].setFocusable(false);
        }
        for(int i=0;i<10;i++){
            numberButtons[i] = new JButton(Character.toString('0'+i));
            numberButtons[i].setFont(myFont);
            numberButtons[i].addActionListener(this);
            numberButtons[i].setFocusable(false);
        }
        functionButtons[6].setBounds(50,410,145,50);
        functionButtons[7].setBounds(205,410,145,50);
        
        sinButton = new JButton("sin");
        cosButton = new JButton("cos");
        tanButton = new JButton("tan");
        secButton = new JButton("sec");
        cotButton = new JButton("cot");
        cscButton = new JButton("cosec");
        trigButtons[0]=sinButton;
        trigButtons[1]=cscButton;
        trigButtons[2]=cosButton;
        trigButtons[3]=secButton;
        trigButtons[4]=tanButton;
        trigButtons[5]=cotButton;
        
        
        
        panel = new JPanel();
        panel.setBounds(50,100,300,300);
        panel.setLayout(new GridLayout(4,4,10,10));
        panel.setBackground(Color.BLUE);
        panel.add(numberButtons[1]);
        panel.add(numberButtons[2]);
        panel.add(numberButtons[3]);
        panel.add(functionButtons[0]);
        panel.add(numberButtons[4]);
        panel.add(numberButtons[5]);
        panel.add(numberButtons[6]);
        panel.add(functionButtons[1]);
        panel.add(numberButtons[7]);
        panel.add(numberButtons[8]);
        panel.add(numberButtons[9]);
        panel.add(functionButtons[2]);
        panel.add(functionButtons[4]);
        panel.add(numberButtons[0]);
        panel.add(functionButtons[3]);
        panel.add(functionButtons[5]);
        
        
        panel2 = new JPanel();
        panel2.setBounds(360,100,50,300);
        panel2.setBackground(Color.RED);
        panel2.setLayout(new GridLayout(4,1,10,10));
        panel2.add(coolerButtons[0]);
        panel2.add(coolerButtons[1]);
        
        panel3 = new JPanel();
        panel3.setBounds(420,100,150,120);
        panel3.setBackground(Color.GREEN);
        panel3.setLayout(new GridLayout(3,2,10,10));
        for(int i=0;i<6;i++){
            panel3.add(trigButtons[i]);
        }
        
        
        frame.add(panel);
        frame.add(functionButtons[6]);
        frame.add(functionButtons[7]);
        frame.add(panel2);
        frame.add(panel3);
        frame.add(textfield);
        frame.setVisible(true);
    }
    
    public static void main(String[] args){
        Calculator calc = new Calculator();
        
    }
    public boolean isArithmeticOperator(char a){
        if(a=='/'||a=='*'||a=='+'||a=='-'){
            return true;
        }else{return false;}
    }
    public String Operation (String S, char operator){
        double op1=0.0,op2=0.0;
        String Sop1= new String();
        String Sop2= new String();
        
        for(int i=0;i<S.length();i++){
            if(S.charAt(i)== operator){
                int x = i;
                while(true){
                    
                    if((x+1)<S.length()){
                        
                        if((S.charAt(x+1)>='0' && S.charAt(x+1)<='9')){
                            if(x>=S.length()){break;}
                            x++;
                        }else if( S.charAt(x+1)=='.' ){
                            x++;
                        }else{
                            break;
                        }
                    }else{break;}
                }
                Sop2 = S.substring(i+1,x+1);
                System.out.println("Operand 2 :"+Sop2);
                op2 = Double.parseDouble(Sop2);

                int y = i;
                while(true){     
                    if(y-1>0){
                        
                        if((S.charAt(y-2)>='0' && S.charAt(y-2)<='9')|| S.charAt(y-2)=='.'){
                            y--;
                        }else{break;}
                    }else{break;}
                }
                Sop1 = S.substring(y-1,i);
                System.out.println("Operand 1 :"+Sop1);
                op1 = Double.parseDouble(Sop1);
                double op3 =0.0;
                switch (operator){
                    case '/': op3 = op1/op2;
                        break;
                    case '*': op3 = op1*op2;
                        break;
                    case '+': op3 = op1+op2;
                        break;
                    case '-': op3 = op1-op2;
                        break;
                }
                StringBuffer buf = new StringBuffer(S);
                buf.replace(y-1,x+1,(""+op3));
                
                S=buf.toString();
                break;
                   
            }
        }
        
        return S;    
    }
    public void Solve(String S){
        double op1=0.0,op2=0.0;
        String Sop1= new String();
        String Sop2= new String();
        int next,prev;
        String result = new String();
        
        result = "";
        for(int i=0;i<S.length();i++){
            if(S.charAt(i)=='/'){
                S = Operation(S,'/');
            }
            expression = S;
            textfield.setText(expression);
        }
        for(int i=0;i<S.length();i++){
            if(S.charAt(i)=='*'){
                S = Operation(S,'*');
            }
            expression = S;
            textfield.setText(expression);
        }
        for(int i=0;i<S.length();i++){
            if(S.charAt(i)=='+'){
                S = Operation(S,'+');
            }
            expression = S;
            textfield.setText(expression);
        }
        for(int i=0;i<S.length();i++){
            if(S.charAt(i)=='-'){
                S = Operation(S,'-');
            }
            expression = S;
            textfield.setText(expression);
        }
        
        return;
        //return result;
    }
    public void actionPerformed(ActionEvent e){
        

        
        
        for(int i=0;i<10;i++){
            if(e.getSource() == numberButtons[i]){
                expression = expression.concat(String.valueOf(i));
                textfield.setText(expression);
                //System.out.println(expression);
                //textfield.setText(textfield.getText().concat(String.valueOf(i)));
            }
        }
        for(int i=0;i<8;i++){
            if(e.getSource() == functionButtons[i]){
                char operator = ' ';
                switch(i){
                    case 0:
                        operator = '+';
                        expression = expression.concat(Character.toString(operator));
                        textfield.setText(expression);
                        break;
                    case 1:
                        operator = '-';
                        expression = expression.concat(Character.toString(operator));
                        textfield.setText(expression);
                        break;
                    case 2:
                        operator = '*';
                        expression = expression.concat(Character.toString(operator));
                        textfield.setText(expression);
                        break;
                    case 3:
                        operator = '/';
                        expression = expression.concat(Character.toString(operator));
                        textfield.setText(expression);
                        break;
                    case 4:
                        operator = '.';
                        expression = expression.concat(Character.toString(operator));
                        textfield.setText(expression);
                        break;
                    case 5:
                        expression = textfield.getText();
                        Solve(expression);
                        break;
                    case 6:
                        expression = expression.substring(0,expression.length()-1);
                        textfield.setText(expression);
                        break;
                    case 7:
                        expression = "";
                        textfield.setText(expression);
                        break;
                    default:
                        
                }
                
            }
        }
        
    }
}
